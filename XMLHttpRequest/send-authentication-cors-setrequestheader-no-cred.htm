<!doctype html>
<html>
  <head>
    <title>XMLHttpRequest: send() - "Basic" authenticated CORS request using setRequestHeader() but not setting withCredentials (expects to succeed)</title>
    <script src="/resources/testharness.js"></script>
    <script src="/resources/testharnessreport.js"></script>
    <script src="/common/utils.js"></script>
    <!-- These spec references do not make much sense simply because the spec doesn't say very much about this.. -->
    <link rel="help" href="https://xhr.spec.whatwg.org/#the-setrequestheader()-method" data-tested-assertations="following::ol[1]/li[6]" />
    <link rel="help" href="https://xhr.spec.whatwg.org/#the-send()-method" data-tested-assertations="following::code[contains(@title,'http-authorization')]/.." />
  </head>
  <body>
    <div id="log"></div>
    <script>
    function doTest(desc, pathsuffic, conditionsFunc, errorFunc) {
      var test = async_test(desc)
      test.step(function() {
        var client = new XMLHttpRequest(),
            urlstart = location.host + location.pathname.replace(/\/[^\/]*$/, '/'),
            user = token()
        client.open("GET", location.protocol + "//www1." + urlstart + "resources/" + pathsuffic, false)
        client.setRequestHeader("x-user", user)
        client.setRequestHeader("x-pass", 'pass')
        client.setRequestHeader("Authorization", "Basic " + btoa(user + ":pass"))
        client.onerror = test.step_func(errorFunc)
        client.onreadystatechange = function () {
          if (client.readyState < 4) {return}
          test.step(conditionsFunc(client, test, user))
        }
        client.send(null)
      })
    }

    doTest("CORS request with setRequestHeader auth to URL accepting Authorization header", "auth7/corsenabled.py", function (client, test, user) {
      return function(){
          assert_true(client.responseText == (user + "\npass"), "responseText should contain the right user and password")
          assert_equals(client.status, 200)
          assert_equals(client.getResponseHeader("x-challenge"), "DID-NOT")
          test.done()
      }
    }, function(){
      return function(){
        assert_unreached("Cross-domain request is permitted and should not cause an error")
        this.done()
      }
    })
    doTest("CORS request with setRequestHeader auth to URL NOT accepting Authorization header", "auth8/corsenabled-no-authorize.py", function (client, test, user) {
      return function(){
          assert_equals(client.responseText, "")
          assert_equals(client.status, 0)
          this.done()
        }
    }, function(){
      return function(){
        assert_unreached("This CORS request includes a non-whitelisted header and should fail, but not trigger onerror")
        this.done()
      }
    })

    </script>
  </body>
</html>
